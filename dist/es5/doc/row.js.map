{"version":3,"sources":["../../../lib/doc/row.js"],"names":["_","require","Enums","colCache","Cell","Row","module","exports","worksheet","number","_worksheet","_number","_cells","style","outlineLevel","prototype","commit","_commitRow","destroy","findCell","colNumber","getCellEx","address","cell","col","column","getColumn","getCell","getColumnKey","l2n","encodeAddress","row","splice","start","count","inserts","Array","slice","call","arguments","nKeep","nExpand","length","nEnd","i","cSrc","cDst","value","undefined","eachCell","options","iteratee","includeEmpty","n","forEach","index","type","ValueType","Null","addPageBreak","lft","rght","ws","left","Math","max","right","pb","id","man","min","rowBreaks","push","values","offset","hasOwnProperty","item","eachColumnKey","key","hasValues","some","cellCount","actualCellCount","dimensions","_applyStyle","name","numFmt","font","alignment","border","fill","hidden","_hidden","_outlineLevel","collapsed","properties","outlineLevelRow","model","cells","cellModel","height","Error","previousAddress","Types","Merge","decodeAddress","$col$row","n2l","JSON","parse","stringify"],"mappings":"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","file":"row.js","sourcesContent":["'use strict';\r\n\r\nconst _ = require('../utils/under-dash');\r\n\r\nconst Enums = require('./enums');\r\nconst colCache = require('./../utils/col-cache');\r\nconst Cell = require('./cell');\r\n\r\nconst Row = module.exports = function (worksheet, number) {\r\n  this._worksheet = worksheet;\r\n  this._number = number;\r\n  this._cells = [];\r\n  this.style = {};\r\n  this.outlineLevel = 0;\r\n};\r\n\r\nRow.prototype = {\r\n  // return the row number\r\n  get number() {\r\n    return this._number;\r\n  },\r\n\r\n  get worksheet() {\r\n    return this._worksheet;\r\n  },\r\n\r\n  // Inform Streaming Writer that this row (and all rows before it) are complete\r\n  // and ready to write. Has no effect on Worksheet document\r\n  commit: function() {\r\n    this._worksheet._commitRow(this); // eslint-disable-line no-underscore-dangle\r\n  },\r\n\r\n  // helps GC by breaking cyclic references\r\n  destroy: function() {\r\n    delete this._worksheet;\r\n    delete this._cells;\r\n    delete this.style;\r\n  },\r\n\r\n  findCell: function(colNumber) {\r\n    return this._cells[colNumber - 1];\r\n  },\r\n\r\n  // given {address, row, col}, find or create new cell\r\n  getCellEx: function(address) {\r\n    let cell = this._cells[address.col - 1];\r\n    if (!cell) {\r\n      const column = this._worksheet.getColumn(address.col);\r\n      cell = new Cell(this, column, address.address);\r\n      this._cells[address.col - 1] = cell;\r\n    }\r\n    return cell;\r\n  },\r\n\r\n  // get cell by key, letter or column number\r\n  getCell: function(col) {\r\n    if (typeof col === 'string') {\r\n      // is it a key?\r\n      const column = this._worksheet.getColumnKey(col);\r\n      if (column) {\r\n        col = column.number;\r\n      } else {\r\n        col = colCache.l2n(col);\r\n      }\r\n    }\r\n    return this._cells[col - 1] ||\r\n      this.getCellEx({\r\n        address: colCache.encodeAddress(this._number, col),\r\n        row: this._number,\r\n        col: col\r\n      });\r\n  },\r\n\r\n  // remove cell(s) and shift all higher cells down by count\r\n  splice: function(start, count) {\r\n    const inserts = Array.prototype.slice.call(arguments, 2);\r\n    const nKeep = start + count;\r\n    const nExpand = inserts.length - count;\r\n    const nEnd = this._cells.length;\r\n    let i, cSrc, cDst;\r\n\r\n    if (nExpand < 0) {\r\n      // remove cells\r\n      for (i = start + inserts.length; i <= nEnd; i++) {\r\n        cDst = this._cells[i - 1];\r\n        cSrc = this._cells[i - nExpand - 1];\r\n        if (cSrc) {\r\n          cDst = this.getCell(i);\r\n          cDst.value = cSrc.value;\r\n          cDst.style = cSrc.style;\r\n        } else if (cDst) {\r\n          cDst.value = null;\r\n          cDst.style = {};\r\n        }\r\n      }\r\n    } else if (nExpand > 0) {\r\n      // insert new cells\r\n      for (i = nEnd; i >= nKeep; i--) {\r\n        cSrc = this._cells[i - 1];\r\n        if (cSrc) {\r\n          cDst = this.getCell(i + nExpand);\r\n          cDst.value = cSrc.value;\r\n          cDst.style = cSrc.style;\r\n        } else {\r\n          this._cells[(i + nExpand) - 1] = undefined;\r\n        }\r\n      }\r\n    }\r\n\r\n    // now add the new values\r\n    for (i = 0; i < inserts.length; i++) {\r\n      cDst = this.getCell(start + i);\r\n      cDst.value = inserts[i];\r\n      cDst.style = {};\r\n    }\r\n  },\r\n\r\n  // Iterate over all non-null cells in this row\r\n  eachCell: function(options, iteratee) {\r\n    if (!iteratee) {\r\n      iteratee = options;\r\n      options = null;\r\n    }\r\n    if (options && options.includeEmpty) {\r\n      const n = this._cells.length;\r\n      for (let i = 1; i <= n; i++) {\r\n        iteratee(this.getCell(i), i);\r\n      }\r\n    } else {\r\n      this._cells.forEach(function(cell, index) {\r\n        if (cell && (cell.type !== Enums.ValueType.Null)) {\r\n          iteratee(cell, index + 1);\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n    // ===========================================================================\r\n  // Page Breaks\r\n  addPageBreak: function(lft, rght) {\r\n    const ws = this._worksheet;\r\n    const left = Math.max(0, lft - 1) || 0;\r\n    const right = Math.max(0, rght - 1) || 16838;\r\n    const pb = {\r\n      id: this._number,\r\n      max: right,\r\n      man: 1\r\n    };\r\n    if (left) pb.min = left;\r\n\r\n    ws.rowBreaks.push(pb);\r\n  },\r\n\r\n  // return a sparse array of cell values\r\n  get values() {\r\n    const values = [];\r\n    this._cells.forEach(function(cell) {\r\n      if (cell && (cell.type !== Enums.ValueType.Null)) {\r\n        values[cell.col] = cell.value;\r\n      }\r\n    });\r\n    return values;\r\n  },\r\n\r\n  // set the values by contiguous or sparse array, or by key'd object literal\r\n  set values(value) {\r\n    // this operation is not additive - any prior cells are removed\r\n    this._cells = [];\r\n    if (!value) {\r\n      // empty row\r\n    } else if (value instanceof Array) {\r\n      let offset = 0;\r\n      if (value.hasOwnProperty('0')) {\r\n        // contiguous array - start at column 1\r\n        offset = 1;\r\n      }\r\n      value.forEach((item, index) => {\r\n        if (item !== undefined) {\r\n          this.getCellEx({\r\n            address: colCache.encodeAddress(this._number, index + offset),\r\n            row: this._number,\r\n            col: index + offset\r\n          }).value = item;\r\n        }\r\n      });\r\n    } else {\r\n      // assume object with column keys\r\n      this._worksheet.eachColumnKey((column, key) => {\r\n        if (value[key] !== undefined) {\r\n          this.getCellEx({\r\n            address: colCache.encodeAddress(this._number, column.number),\r\n            row: this._number,\r\n            col: column.number\r\n          }).value = value[key];\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  // returns true if the row includes at least one cell with a value\r\n  get hasValues() {\r\n    return _.some(this._cells, function(cell) {\r\n      return cell && (cell.type !== Enums.ValueType.Null);\r\n    });\r\n  },\r\n\r\n  get cellCount() {\r\n    return this._cells.length;\r\n  },\r\n  get actualCellCount() {\r\n    let count = 0;\r\n    this.eachCell(function() {\r\n      count++;\r\n    });\r\n    return count;\r\n  },\r\n\r\n  // get the min and max column number for the non-null cells in this row or null\r\n  get dimensions() {\r\n    let min = 0;\r\n    let max = 0;\r\n    this._cells.forEach(function(cell) {\r\n      if (cell && (cell.type !== Enums.ValueType.Null)) {\r\n        if (!min || (min > cell.col)) {\r\n          min = cell.col;\r\n        }\r\n        if (max < cell.col) {\r\n          max = cell.col;\r\n        }\r\n      }\r\n    });\r\n    return min > 0 ? {\r\n      min: min,\r\n      max: max\r\n    } : null;\r\n  },\r\n\r\n  // =========================================================================\r\n  // styles\r\n  _applyStyle: function(name, value) {\r\n    this.style[name] = value;\r\n    this._cells.forEach(function(cell) {\r\n      if (cell) { cell[name] = value; }\r\n    });\r\n    return value;\r\n  },\r\n\r\n  get numFmt() {\r\n    return this.style.numFmt;\r\n  },\r\n  set numFmt(value) {\r\n    this._applyStyle('numFmt', value);\r\n  },\r\n  get font() {\r\n    return this.style.font;\r\n  },\r\n  set font(value) {\r\n    this._applyStyle('font', value);\r\n  },\r\n  get alignment() {\r\n    return this.style.alignment;\r\n  },\r\n  set alignment(value) {\r\n    this._applyStyle('alignment', value);\r\n  },\r\n  get border() {\r\n    return this.style.border;\r\n  },\r\n  set border(value) {\r\n    this._applyStyle('border', value);\r\n  },\r\n  get fill() {\r\n    return this.style.fill;\r\n  },\r\n  set fill(value) {\r\n    this._applyStyle('fill', value);\r\n  },\r\n\r\n  get hidden() {\r\n    return !!this._hidden;\r\n  },\r\n  set hidden(value) {\r\n    this._hidden = value;\r\n  },\r\n\r\n  get outlineLevel() {\r\n    return this._outlineLevel || 0;\r\n  },\r\n  set outlineLevel(value) {\r\n    this._outlineLevel = value;\r\n  },\r\n  get collapsed() {\r\n    return !!(this._outlineLevel && (this._outlineLevel >= this._worksheet.properties.outlineLevelRow));\r\n  },\r\n\r\n  // =========================================================================\r\n  get model() {\r\n    const cells = [];\r\n    let min = 0;\r\n    let max = 0;\r\n    this._cells.forEach(function(cell) {\r\n      if (cell) {\r\n        const cellModel = cell.model;\r\n        if (cellModel) {\r\n          if (!min || (min > cell.col)) {\r\n            min = cell.col;\r\n          }\r\n          if (max < cell.col) {\r\n            max = cell.col;\r\n          }\r\n          cells.push(cellModel);\r\n        }\r\n      }\r\n    });\r\n\r\n    return (this.height || cells.length) ? {\r\n      cells: cells,\r\n      number: this.number,\r\n      min: min,\r\n      max: max,\r\n      height: this.height,\r\n      style: this.style,\r\n      hidden: this.hidden,\r\n      outlineLevel: this.outlineLevel,\r\n      collapsed: this.collapsed\r\n    } : null;\r\n  },\r\n  set model(value) {\r\n    if (value.number !== this._number) {\r\n      throw new Error('Invalid row number in model');\r\n    }\r\n    this._cells = [];\r\n    let previousAddress;\r\n    value.cells.forEach(cellModel => {\r\n      switch (cellModel.type) {\r\n        case Cell.Types.Merge:\r\n          // special case - don't add this types\r\n          break;\r\n        default:\r\n          let address;\r\n          if (cellModel.address) {\r\n            address = colCache.decodeAddress(cellModel.address);\r\n          } else if (previousAddress) {\r\n            // This is a <c> element without an r attribute\r\n            // Assume that it's the cell for the next column\r\n            const row = previousAddress.row;\r\n            const col = previousAddress.col + 1;\r\n            address = {\r\n              row: row,\r\n              col: col,\r\n              address: colCache.encodeAddress(row, col),\r\n              $col$row: '$' + colCache.n2l(col) + '$' + row\r\n            };\r\n          }\r\n          previousAddress = address;\r\n          const cell = this.getCellEx(address);\r\n          cell.model = cellModel;\r\n          break;\r\n      }\r\n    });\r\n\r\n    if (value.height) {\r\n      this.height = value.height;\r\n    } else {\r\n      delete this.height;\r\n    }\r\n\r\n    this.hidden = value.hidden;\r\n    this.outlineLevel = value.outlineLevel || 0;\r\n\r\n    this.style = value.style && JSON.parse(JSON.stringify(value.style)) || {};\r\n  }\r\n};\r\n"]}