{"version":3,"sources":["../../../lib/doc/worksheet.js"],"names":["_","require","colCache","Range","Row","Column","Enums","Image","DataValidations","Worksheet","options","id","orderNo","name","state","_rows","_columns","_keys","_merges","rowBreaks","_workbook","workbook","properties","Object","assign","defaultRowHeight","dyDescent","outlineLevelCol","outlineLevelRow","pageSetup","margins","left","right","top","bottom","header","footer","orientation","horizontalDpi","verticalDpi","fitToPage","fitToWidth","fitToHeight","scale","pageOrder","blackAndWhite","draft","cellComments","errors","paperSize","undefined","showRowColHeaders","showGridLines","firstPageNumber","horizontalCentered","verticalCentered","colBreaks","dataValidations","views","autoFilter","_media","prototype","destroy","removeWorksheetEx","dimensions","forEach","row","rowDims","expand","number","min","max","columns","value","_headerRowCount","reduce","pv","cv","headerCount","headers","length","Math","count","column","push","defn","getColumnKey","key","setColumnKey","deleteColumnKey","eachColumnKey","f","each","getColumn","c","col","l2n","n","spliceColumns","start","inserts","Array","slice","call","arguments","rows","nRows","i","rowArguments","insert","getRow","splice","apply","r","nExpand","nKeep","nEnd","definedNames","columnCount","maxCount","eachRow","cellCount","actualColumnCount","counts","eachCell","_commitRow","_lastRowNumber","_nextRow","lastRow","findRow","rowCount","actualRowCount","addRow","values","addRows","spliceRows","rSrc","rDst","style","includeEmpty","cell","colNumber","getCell","iteratee","hasValues","getSheetValues","findCell","address","getAddress","getCellEx","mergeCells","merge","intersects","Error","master","j","_unMergeMaster","unmerge","hasMerges","some","unMergeCells","type","ValueType","Merge","fillFormula","range","formula","results","decoded","decode","width","masterAddress","encodeAddress","getResult","isArray","first","result","sharedFormula","addImage","addImageToCells","imageId","model","getImages","filter","m","addBackgroundImage","getBackgroundImageId","image","find","tabColor","console","trace","media","map","medium","cols","toModel","rowModel","merges","_parseRows","_parseMergeCells","fromModel","module","exports"],"mappings":"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","file":"worksheet.js","sourcesContent":["'use strict';\r\n\r\nconst _ = require('../utils/under-dash');\r\n\r\nconst colCache = require('./../utils/col-cache');\r\nconst Range = require('./range');\r\nconst Row = require('./row');\r\nconst Column = require('./column');\r\nconst Enums = require('./enums');\r\nconst Image = require('./image');\r\nconst DataValidations = require('./data-validations');\r\n\r\n// Worksheet requirements\r\n//  Operate as sheet inside workbook or standalone\r\n//  Load and Save from file and stream\r\n//  Access/Add/Delete individual cells\r\n//  Manage column widths and row heights\r\n\r\nconst Worksheet = function(options) {\r\n  options = options || {};\r\n\r\n  // in a workbook, each sheet will have a number\r\n  this.id = options.id;\r\n  this.orderNo = options.orderNo;\r\n\r\n  // and a name\r\n  this.name = options.name || `Sheet${this.id}`;\r\n\r\n  // add a state\r\n  this.state = options.state || 'visible';\r\n\r\n  // rows allows access organised by row. Sparse array of arrays indexed by row-1, col\r\n  // Note: _rows is zero based. Must subtract 1 to go from cell.row to index\r\n  this._rows = [];\r\n\r\n  // column definitions\r\n  this._columns = null;\r\n\r\n  // column keys (addRow convenience): key ==> this._collumns index\r\n  this._keys = {};\r\n\r\n  // keep record of all merges\r\n  this._merges = {};\r\n\r\n  // record of all row and column pageBreaks\r\n  this.rowBreaks = [];\r\n\r\n  this._workbook = options.workbook;\r\n\r\n  // for tabColor, default row height, outline levels, etc\r\n  this.properties = Object.assign(\r\n    {},\r\n    {\r\n      defaultRowHeight: 15,\r\n      dyDescent: 55,\r\n      outlineLevelCol: 0,\r\n      outlineLevelRow: 0,\r\n    },\r\n    options.properties\r\n  );\r\n\r\n  // for all things printing\r\n  this.pageSetup = Object.assign(\r\n    {},\r\n    {\r\n      margins: { left: 0.7, right: 0.7, top: 0.75, bottom: 0.75, header: 0.3, footer: 0.3 },\r\n      orientation: 'portrait',\r\n      horizontalDpi: 4294967295,\r\n      verticalDpi: 4294967295,\r\n      fitToPage: !!(options.pageSetup && ((options.pageSetup.fitToWidth || options.pageSetup.fitToHeight) && !options.pageSetup.scale)),\r\n      pageOrder: 'downThenOver',\r\n      blackAndWhite: false,\r\n      draft: false,\r\n      cellComments: 'None',\r\n      errors: 'displayed',\r\n      scale: 100,\r\n      fitToWidth: 1,\r\n      fitToHeight: 1,\r\n      paperSize: undefined,\r\n      showRowColHeaders: false,\r\n      showGridLines: false,\r\n      firstPageNumber: undefined,\r\n      horizontalCentered: false,\r\n      verticalCentered: false,\r\n      rowBreaks: null,\r\n      colBreaks: null,\r\n    },\r\n    options.pageSetup\r\n  );\r\n\r\n  this.dataValidations = new DataValidations();\r\n\r\n  // for freezepanes, split, zoom, gridlines, etc\r\n  this.views = options.views || [];\r\n\r\n  this.autoFilter = options.autoFilter || null;\r\n\r\n  // for images, etc\r\n  this._media = [];\r\n};\r\n\r\nWorksheet.prototype = {\r\n  get workbook() {\r\n    return this._workbook;\r\n  },\r\n\r\n  // when you're done with this worksheet, call this to remove from workbook\r\n  destroy() {\r\n    this._workbook.removeWorksheetEx(this);\r\n  },\r\n\r\n  // Get the bounding range of the cells in this worksheet\r\n  get dimensions() {\r\n    const dimensions = new Range();\r\n    this._rows.forEach(row => {\r\n      if (row) {\r\n        const rowDims = row.dimensions;\r\n        if (rowDims) {\r\n          dimensions.expand(row.number, rowDims.min, row.number, rowDims.max);\r\n        }\r\n      }\r\n    });\r\n    return dimensions;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Columns\r\n\r\n  // get the current columns array.\r\n  get columns() {\r\n    return this._columns;\r\n  },\r\n\r\n  // set the columns from an array of column definitions.\r\n  // Note: any headers defined will overwrite existing values.\r\n  set columns(value) {\r\n    // calculate max header row count\r\n    this._headerRowCount = value.reduce((pv, cv) => {\r\n      const headerCount = (cv.header && 1) || (cv.headers && cv.headers.length) || 0;\r\n      return Math.max(pv, headerCount);\r\n    }, 0);\r\n\r\n    // construct Column objects\r\n    let count = 1;\r\n    const columns = (this._columns = []);\r\n    value.forEach(defn => {\r\n      const column = new Column(this, count++, false);\r\n      columns.push(column);\r\n      column.defn = defn;\r\n    });\r\n  },\r\n\r\n  getColumnKey(key) {\r\n    return this._keys[key];\r\n  },\r\n  setColumnKey(key, value) {\r\n    this._keys[key] = value;\r\n  },\r\n  deleteColumnKey(key) {\r\n    delete this._keys[key];\r\n  },\r\n  eachColumnKey(f) {\r\n    _.each(this._keys, f);\r\n  },\r\n\r\n  // get a single column by col number. If it doesn't exist, create it and any gaps before it\r\n  getColumn(c) {\r\n    if (typeof c === 'string') {\r\n      // if it matches a key'd column, return that\r\n      const col = this._keys[c];\r\n      if (col) return col;\r\n\r\n      // otherwise, assume letter\r\n      c = colCache.l2n(c);\r\n    }\r\n    if (!this._columns) {\r\n      this._columns = [];\r\n    }\r\n    if (c > this._columns.length) {\r\n      let n = this._columns.length + 1;\r\n      while (n <= c) {\r\n        this._columns.push(new Column(this, n++));\r\n      }\r\n    }\r\n    return this._columns[c - 1];\r\n  },\r\n  spliceColumns(start, count) {\r\n    // each member of inserts is a column of data.\r\n    const inserts = Array.prototype.slice.call(arguments, 2);\r\n    const rows = this._rows;\r\n    const nRows = rows.length;\r\n    if (inserts.length > 0) {\r\n      // must iterate over all rows whether they exist yet or not\r\n      for (let i = 0; i < nRows; i++) {\r\n        const rowArguments = [start, count];\r\n        // eslint-disable-next-line no-loop-func\r\n        inserts.forEach(insert => {\r\n          rowArguments.push(insert[i] || null);\r\n        });\r\n        const row = this.getRow(i + 1);\r\n        // eslint-disable-next-line prefer-spread\r\n        row.splice.apply(row, rowArguments);\r\n      }\r\n    } else {\r\n      // nothing to insert, so just splice all rows\r\n      this._rows.forEach(r => {\r\n        if (r) {\r\n          r.splice(start, count);\r\n        }\r\n      });\r\n    }\r\n\r\n    // splice column definitions\r\n    const nExpand = inserts.length - count;\r\n    const nKeep = start + count;\r\n    const nEnd = this._columns.length;\r\n    if (nExpand < 0) {\r\n      for (let i = start + inserts.length; i <= nEnd; i++) {\r\n        this.getColumn(i).defn = this.getColumn(i - nExpand).defn;\r\n      }\r\n    } else if (nExpand > 0) {\r\n      for (let i = nEnd; i >= nKeep; i--) {\r\n        this.getColumn(i + nExpand).defn = this.getColumn(i).defn;\r\n      }\r\n    }\r\n    for (let i = start; i < start + inserts.length; i++) {\r\n      this.getColumn(i).defn = null;\r\n    }\r\n\r\n    // account for defined names\r\n    this.workbook.definedNames.spliceColumns(this.name, start, count, inserts.length);\r\n  },\r\n\r\n  get columnCount() {\r\n    let maxCount = 0;\r\n    this.eachRow(row => {\r\n      maxCount = Math.max(maxCount, row.cellCount);\r\n    });\r\n    return maxCount;\r\n  },\r\n  get actualColumnCount() {\r\n    // performance nightmare - for each row, counts all the columns used\r\n    const counts = [];\r\n    let count = 0;\r\n    this.eachRow(row => {\r\n      row.eachCell(({ col }) => {\r\n        if (!counts[col]) {\r\n          counts[col] = true;\r\n          count++;\r\n        }\r\n      });\r\n    });\r\n    return count;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Rows\r\n\r\n  _commitRow() {\r\n    // nop - allows streaming reader to fill a document\r\n  },\r\n\r\n  get _lastRowNumber() {\r\n    // need to cope with results of splice\r\n    const rows = this._rows;\r\n    let n = rows.length;\r\n    while (n > 0 && rows[n - 1] === undefined) {\r\n      n--;\r\n    }\r\n    return n;\r\n  },\r\n  get _nextRow() {\r\n    return this._lastRowNumber + 1;\r\n  },\r\n\r\n  get lastRow() {\r\n    if (this._rows.length) {\r\n      return this._rows[this._rows.length - 1];\r\n    }\r\n    return undefined;\r\n  },\r\n\r\n  // find a row (if exists) by row number\r\n  findRow(r) {\r\n    return this._rows[r - 1];\r\n  },\r\n\r\n  get rowCount() {\r\n    return this._lastRowNumber;\r\n  },\r\n  get actualRowCount() {\r\n    // counts actual rows that have actual data\r\n    let count = 0;\r\n    this.eachRow(() => {\r\n      count++;\r\n    });\r\n    return count;\r\n  },\r\n\r\n  // get a row by row number.\r\n  getRow(r) {\r\n    let row = this._rows[r - 1];\r\n    if (!row) {\r\n      row = this._rows[r - 1] = new Row(this, r);\r\n    }\r\n    return row;\r\n  },\r\n  addRow(value) {\r\n    const row = this.getRow(this._nextRow);\r\n    row.values = value;\r\n    return row;\r\n  },\r\n  addRows(value) {\r\n    value.forEach(row => {\r\n      this.addRow(row);\r\n    });\r\n  },\r\n\r\n  spliceRows(start, count) {\r\n    // same problem as row.splice, except worse.\r\n    const inserts = Array.prototype.slice.call(arguments, 2);\r\n    const nKeep = start + count;\r\n    const nExpand = inserts.length - count;\r\n    const nEnd = this._rows.length;\r\n    let i;\r\n    let rSrc;\r\n    if (nExpand < 0) {\r\n      // remove rows\r\n      for (i = nKeep; i <= nEnd; i++) {\r\n        rSrc = this._rows[i - 1];\r\n        if (rSrc) {\r\n          const rDst = this.getRow(i + nExpand);\r\n          rDst.values = rSrc.values;\r\n          rDst.style = rSrc.style;\r\n          // eslint-disable-next-line no-loop-func\r\n          rSrc.eachCell({ includeEmpty: true }, (cell, colNumber) => {\r\n            rDst.getCell(colNumber).style = cell.style;\r\n          });\r\n          this._rows[i - 1] = undefined;\r\n        } else {\r\n          this._rows[i + nExpand - 1] = undefined;\r\n        }\r\n      }\r\n    } else if (nExpand > 0) {\r\n      // insert new cells\r\n      for (i = nEnd; i >= nKeep; i--) {\r\n        rSrc = this._rows[i - 1];\r\n        if (rSrc) {\r\n          const rDst = this.getRow(i + nExpand);\r\n          rDst.values = rSrc.values;\r\n          rDst.style = rSrc.style;\r\n          // eslint-disable-next-line no-loop-func\r\n          rSrc.eachCell({ includeEmpty: true }, (cell, colNumber) => {\r\n            rDst.getCell(colNumber).style = cell.style;\r\n          });\r\n        } else {\r\n          this._rows[i + nExpand - 1] = undefined;\r\n        }\r\n      }\r\n    }\r\n\r\n    // now copy over the new values\r\n    for (i = 0; i < inserts.length; i++) {\r\n      const rDst = this.getRow(start + i);\r\n      rDst.style = {};\r\n      rDst.values = inserts[i];\r\n    }\r\n\r\n    // account for defined names\r\n    this.workbook.definedNames.spliceRows(this.name, start, count, inserts.length);\r\n  },\r\n\r\n  // iterate over every row in the worksheet, including maybe empty rows\r\n  eachRow(options, iteratee) {\r\n    if (!iteratee) {\r\n      iteratee = options;\r\n      options = undefined;\r\n    }\r\n    if (options && options.includeEmpty) {\r\n      const n = this._rows.length;\r\n      for (let i = 1; i <= n; i++) {\r\n        iteratee(this.getRow(i), i);\r\n      }\r\n    } else {\r\n      this._rows.forEach(row => {\r\n        if (row && row.hasValues) {\r\n          iteratee(row, row.number);\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  // return all rows as sparse array\r\n  getSheetValues() {\r\n    const rows = [];\r\n    this._rows.forEach(row => {\r\n      if (row) {\r\n        rows[row.number] = row.values;\r\n      }\r\n    });\r\n    return rows;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Cells\r\n\r\n  // returns the cell at [r,c] or address given by r. If not found, return undefined\r\n  findCell(r, c) {\r\n    const address = colCache.getAddress(r, c);\r\n    const row = this._rows[address.row - 1];\r\n    return row ? row.findCell(address.col) : undefined;\r\n  },\r\n\r\n  // return the cell at [r,c] or address given by r. If not found, create a new one.\r\n  getCell(r, c) {\r\n    const address = colCache.getAddress(r, c);\r\n    const row = this.getRow(address.row);\r\n    return row.getCellEx(address);\r\n  },\r\n\r\n  // =========================================================================\r\n  // Merge\r\n\r\n  // convert the range defined by ['tl:br'], [tl,br] or [t,l,b,r] into a single 'merged' cell\r\n  mergeCells() {\r\n    const dimensions = new Range(Array.prototype.slice.call(arguments, 0)); // convert arguments into Array\r\n\r\n    // check cells aren't already merged\r\n    _.each(this._merges, merge => {\r\n      if (merge.intersects(dimensions)) {\r\n        throw new Error('Cannot merge already merged cells');\r\n      }\r\n    });\r\n\r\n    // apply merge\r\n    const master = this.getCell(dimensions.top, dimensions.left);\r\n    for (let i = dimensions.top; i <= dimensions.bottom; i++) {\r\n      for (let j = dimensions.left; j <= dimensions.right; j++) {\r\n        // merge all but the master cell\r\n        if (i > dimensions.top || j > dimensions.left) {\r\n          this.getCell(i, j).merge(master);\r\n        }\r\n      }\r\n    }\r\n\r\n    // index merge\r\n    this._merges[master.address] = dimensions;\r\n  },\r\n  _unMergeMaster(master) {\r\n    // master is always top left of a rectangle\r\n    const merge = this._merges[master.address];\r\n    if (merge) {\r\n      for (let i = merge.top; i <= merge.bottom; i++) {\r\n        for (let j = merge.left; j <= merge.right; j++) {\r\n          this.getCell(i, j).unmerge();\r\n        }\r\n      }\r\n      delete this._merges[master.address];\r\n    }\r\n  },\r\n\r\n  get hasMerges() {\r\n    return _.some(\r\n      this._merges,\r\n      () =>\r\n        // TODO: this doesn't look right\r\n        true\r\n    );\r\n  },\r\n\r\n  // scan the range defined by ['tl:br'], [tl,br] or [t,l,b,r] and if any cell is part of a merge,\r\n  // un-merge the group. Note this function can affect multiple merges and merge-blocks are\r\n  // atomic - either they're all merged or all un-merged.\r\n  unMergeCells() {\r\n    const dimensions = new Range(Array.prototype.slice.call(arguments, 0)); // convert arguments into Array\r\n\r\n    // find any cells in that range and unmerge them\r\n    for (let i = dimensions.top; i <= dimensions.bottom; i++) {\r\n      for (let j = dimensions.left; j <= dimensions.right; j++) {\r\n        const cell = this.findCell(i, j);\r\n        if (cell) {\r\n          if (cell.type === Enums.ValueType.Merge) {\r\n            // this cell merges to another master\r\n            this._unMergeMaster(cell.master);\r\n          } else if (this._merges[cell.address]) {\r\n            // this cell is a master\r\n            this._unMergeMaster(cell);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  // ===========================================================================\r\n  // Shared Formula\r\n  fillFormula(range, formula, results) {\r\n    // Define formula for top-left cell and share to rest\r\n    const decoded = colCache.decode(range);\r\n    const { top, left, bottom, right } = decoded;\r\n    const width = right - left + 1;\r\n    const masterAddress = colCache.encodeAddress(top, left);\r\n\r\n    // work out result accessor\r\n    let getResult;\r\n    if (typeof results === 'function') {\r\n      getResult = results;\r\n    } else if (Array.isArray(results)) {\r\n      if (Array.isArray(results[0])) {\r\n        getResult = (row, col) => results[row - top][col - left];\r\n      } else {\r\n        getResult = (row, col) => results[((row - top) * width) + (col - left)];\r\n      }\r\n    } else {\r\n      getResult = () => undefined;\r\n    }\r\n    let first = true;\r\n    for (let r = top; r <= bottom; r++) {\r\n      for (let c = left; c <= right; c++) {\r\n        if (first) {\r\n          this.getCell(r, c).value = {\r\n            formula,\r\n            result: getResult(r, c),\r\n          };\r\n          first = false;\r\n        } else {\r\n          this.getCell(r, c).value = {\r\n            sharedFormula: masterAddress,\r\n            result: getResult(r, c),\r\n          };\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  // =========================================================================\r\n  // Images\r\n  addImage: function addImageToCells(imageId, range) {\r\n    const model = {\r\n      type: 'image',\r\n      imageId,\r\n      range,\r\n    };\r\n    this._media.push(new Image(this, model));\r\n  },\r\n\r\n  getImages() {\r\n    return this._media.filter(m => m.type === 'image');\r\n  },\r\n\r\n  addBackgroundImage(imageId) {\r\n    const model = {\r\n      type: 'background',\r\n      imageId,\r\n    };\r\n    this._media.push(new Image(this, model));\r\n  },\r\n\r\n  getBackgroundImageId() {\r\n    const image = this._media.find(m => m.type === 'background');\r\n    return image && image.imageId;\r\n  },\r\n\r\n  // ===========================================================================\r\n  // Deprecated\r\n  get tabColor() {\r\n    // eslint-disable-next-line no-console\r\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\r\n    return this.properties.tabColor;\r\n  },\r\n  set tabColor(value) {\r\n    // eslint-disable-next-line no-console\r\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\r\n    this.properties.tabColor = value;\r\n  },\r\n\r\n  // ===========================================================================\r\n  // Model\r\n\r\n  get model() {\r\n    const model = {\r\n      id: this.id,\r\n      name: this.name,\r\n      dataValidations: this.dataValidations.model,\r\n      properties: this.properties,\r\n      state: this.state,\r\n      pageSetup: this.pageSetup,\r\n      rowBreaks: this.rowBreaks,\r\n      views: this.views,\r\n      autoFilter: this.autoFilter,\r\n      media: this._media.map(medium => medium.model),\r\n    };\r\n\r\n    // =================================================\r\n    // columns\r\n    model.cols = Column.toModel(this.columns);\r\n\r\n    // ==========================================================\r\n    // Rows\r\n    const rows = (model.rows = []);\r\n    const dimensions = (model.dimensions = new Range());\r\n    this._rows.forEach(row => {\r\n      const rowModel = row && row.model;\r\n      if (rowModel) {\r\n        dimensions.expand(rowModel.number, rowModel.min, rowModel.number, rowModel.max);\r\n        rows.push(rowModel);\r\n      }\r\n    });\r\n\r\n    // ==========================================================\r\n    // Merges\r\n    model.merges = [];\r\n    _.each(this._merges, merge => {\r\n      model.merges.push(merge.range);\r\n    });\r\n\r\n    return model;\r\n  },\r\n  _parseRows(model) {\r\n    this._rows = [];\r\n    model.rows.forEach(rowModel => {\r\n      const row = new Row(this, rowModel.number);\r\n      this._rows[row.number - 1] = row;\r\n      row.model = rowModel;\r\n    });\r\n  },\r\n  _parseMergeCells(model) {\r\n    _.each(model.mergeCells, merge => {\r\n      this.mergeCells(merge);\r\n    });\r\n  },\r\n  set model(value) {\r\n    this.name = value.name;\r\n    this._columns = Column.fromModel(this, value.cols);\r\n    this._parseRows(value);\r\n\r\n    this._parseMergeCells(value);\r\n    this.dataValidations = new DataValidations(value.dataValidations);\r\n    this.properties = value.properties;\r\n    this.pageSetup = value.pageSetup;\r\n    this.views = value.views;\r\n    this.autoFilter = value.autoFilter;\r\n    this._media = value.media.map(medium => new Image(this, medium));\r\n  },\r\n};\r\n\r\nmodule.exports = Worksheet;\r\n"]}