{"version":3,"sources":["../../../../../lib/xlsx/xform/drawing/two-cell-anchor-xform.js"],"names":["utils","require","BaseCellAnchorXform","StaticXform","CellPositionXform","PicXform","TwoCellAnchorXform","map","tag","inherits","prepare","model","options","picture","render","xmlStream","openNode","editAs","range","tl","br","closeNode","parseClose","name","parser","undefined","reconcile","medium","reconcilePicture","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,QAAQC,QAAQ,sBAAR,CAAd;AACA,IAAMC,sBAAsBD,QAAQ,0BAAR,CAA5B;AACA,IAAME,cAAcF,QAAQ,iBAAR,CAApB;;AAEA,IAAMG,oBAAoBH,QAAQ,uBAAR,CAA1B;AACA,IAAMI,WAAWJ,QAAQ,aAAR,CAAjB;;AAEA,IAAMK,qBAAqB,SAArBA,kBAAqB,GAAW;AACpC,OAAKC,GAAL,GAAW;AACT,gBAAY,IAAIH,iBAAJ,CAAsB,EAAEI,KAAK,UAAP,EAAtB,CADH;AAET,cAAU,IAAIJ,iBAAJ,CAAsB,EAAEI,KAAK,QAAP,EAAtB,CAFD;AAGT,eAAW,IAAIH,QAAJ,EAHF;AAIT,sBAAkB,IAAIF,WAAJ,CAAgB,EAAEK,KAAK,gBAAP,EAAhB;AAJT,GAAX;AAMD,CAPD;;AASAR,MAAMS,QAAN,CAAeH,kBAAf,EAAmCJ,mBAAnC,EAAwD;AACtD,MAAIM,GAAJ,GAAU;AACR,WAAO,mBAAP;AACD,GAHqD;;AAKtDE,SALsD,mBAK9CC,KAL8C,EAKvCC,OALuC,EAK9B;AACtB,SAAKL,GAAL,CAAS,SAAT,EAAoBG,OAApB,CAA4BC,MAAME,OAAlC,EAA2CD,OAA3C;AACD,GAPqD;AAStDE,QATsD,kBAS/CC,SAT+C,EASpCJ,KAToC,EAS7B;AACvBI,cAAUC,QAAV,CAAmB,KAAKR,GAAxB,EAA6B,EAAES,QAAQN,MAAMO,KAAN,CAAYD,MAAZ,IAAsB,SAAhC,EAA7B;;AAEA,SAAKV,GAAL,CAAS,UAAT,EAAqBO,MAArB,CAA4BC,SAA5B,EAAuCJ,MAAMO,KAAN,CAAYC,EAAnD;AACA,SAAKZ,GAAL,CAAS,QAAT,EAAmBO,MAAnB,CAA0BC,SAA1B,EAAqCJ,MAAMO,KAAN,CAAYE,EAAjD;AACA,SAAKb,GAAL,CAAS,SAAT,EAAoBO,MAApB,CAA2BC,SAA3B,EAAsCJ,MAAME,OAA5C;AACA,SAAKN,GAAL,CAAS,gBAAT,EAA2BO,MAA3B,CAAkCC,SAAlC,EAA6C,EAA7C;;AAEAA,cAAUM,SAAV;AACD,GAlBqD;AAoBtDC,YApBsD,sBAoB3CC,IApB2C,EAoBrC;AACf,QAAI,KAAKC,MAAT,EAAiB;AACf,UAAI,CAAC,KAAKA,MAAL,CAAYF,UAAZ,CAAuBC,IAAvB,CAAL,EAAmC;AACjC,aAAKC,MAAL,GAAcC,SAAd;AACD;AACD,aAAO,IAAP;AACD;AACD,YAAQF,IAAR;AACE,WAAK,KAAKf,GAAV;AACE,aAAKG,KAAL,CAAWO,KAAX,CAAiBC,EAAjB,GAAsB,KAAKZ,GAAL,CAAS,UAAT,EAAqBI,KAA3C;AACA,aAAKA,KAAL,CAAWO,KAAX,CAAiBE,EAAjB,GAAsB,KAAKb,GAAL,CAAS,QAAT,EAAmBI,KAAzC;AACA,aAAKA,KAAL,CAAWE,OAAX,GAAqB,KAAKN,GAAL,CAAS,SAAT,EAAoBI,KAAzC;AACA,eAAO,KAAP;AACF;AACE;AACA,eAAO,IAAP;AARJ;AAUD,GArCqD;AAuCtDe,WAvCsD,qBAuC5Cf,KAvC4C,EAuCrCC,OAvCqC,EAuC5B;AACxBD,UAAMgB,MAAN,GAAe,KAAKC,gBAAL,CAAsBjB,MAAME,OAA5B,EAAqCD,OAArC,CAAf;AACD;AAzCqD,CAAxD;;AA4CAiB,OAAOC,OAAP,GAAiBxB,kBAAjB","file":"two-cell-anchor-xform.js","sourcesContent":["'use strict';\r\n\r\nconst utils = require('../../../utils/utils');\r\nconst BaseCellAnchorXform = require('./base-cell-anchor-xform');\r\nconst StaticXform = require('../static-xform');\r\n\r\nconst CellPositionXform = require('./cell-position-xform');\r\nconst PicXform = require('./pic-xform');\r\n\r\nconst TwoCellAnchorXform = function() {\r\n  this.map = {\r\n    'xdr:from': new CellPositionXform({ tag: 'xdr:from' }),\r\n    'xdr:to': new CellPositionXform({ tag: 'xdr:to' }),\r\n    'xdr:pic': new PicXform(),\r\n    'xdr:clientData': new StaticXform({ tag: 'xdr:clientData' }),\r\n  };\r\n};\r\n\r\nutils.inherits(TwoCellAnchorXform, BaseCellAnchorXform, {\r\n  get tag() {\r\n    return 'xdr:twoCellAnchor';\r\n  },\r\n\r\n  prepare(model, options) {\r\n    this.map['xdr:pic'].prepare(model.picture, options);\r\n  },\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, { editAs: model.range.editAs || 'oneCell' });\r\n\r\n    this.map['xdr:from'].render(xmlStream, model.range.tl);\r\n    this.map['xdr:to'].render(xmlStream, model.range.br);\r\n    this.map['xdr:pic'].render(xmlStream, model.picture);\r\n    this.map['xdr:clientData'].render(xmlStream, {});\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.tag:\r\n        this.model.range.tl = this.map['xdr:from'].model;\r\n        this.model.range.br = this.map['xdr:to'].model;\r\n        this.model.picture = this.map['xdr:pic'].model;\r\n        return false;\r\n      default:\r\n        // could be some unrecognised tags\r\n        return true;\r\n    }\r\n  },\r\n\r\n  reconcile(model, options) {\r\n    model.medium = this.reconcilePicture(model.picture, options);\r\n  },\r\n});\r\n\r\nmodule.exports = TwoCellAnchorXform;\r\n"]}