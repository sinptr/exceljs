{"version":3,"sources":["../../../../../lib/xlsx/xform/drawing/base-cell-anchor-xform.js"],"names":["utils","require","BaseXform","BaseCellAnchorXform","inherits","parseOpen","node","parser","name","tag","reset","model","range","editAs","attributes","map","parseText","text","reconcilePicture","options","rId","rel","rels","match","Target","mediaId","mediaIndex","media","undefined","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,QAAQC,QAAQ,sBAAR,CAAd;AACA,IAAMC,YAAYD,QAAQ,eAAR,CAAlB;;AAEA,IAAME,sBAAsB,SAAtBA,mBAAsB,GAAW,CAAE,CAAzC;;AAEAH,MAAMI,QAAN,CAAeD,mBAAf,EAAoCD,SAApC,EAA+C;AAC7CG,WAD6C,qBACnCC,IADmC,EAC7B;AACd,QAAI,KAAKC,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACA,aAAO,IAAP;AACD;AACD,YAAQA,KAAKE,IAAb;AACE,WAAK,KAAKC,GAAV;AACE,aAAKC,KAAL;AACA,aAAKC,KAAL,GAAa;AACXC,iBAAO;AACLC,oBAAQP,KAAKQ,UAAL,CAAgBD,MAAhB,IAA0B;AAD7B;AADI,SAAb;AAKA;AACF;AACE,aAAKN,MAAL,GAAc,KAAKQ,GAAL,CAAST,KAAKE,IAAd,CAAd;AACA,YAAI,KAAKD,MAAT,EAAiB;AACf,eAAKA,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACD;AACD;AAdJ;AAgBA,WAAO,IAAP;AACD,GAvB4C;AAyB7CU,WAzB6C,qBAyBnCC,IAzBmC,EAyB7B;AACd,QAAI,KAAKV,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYS,SAAZ,CAAsBC,IAAtB;AACD;AACF,GA7B4C;AA+B7CC,kBA/B6C,4BA+B5BP,KA/B4B,EA+BrBQ,OA/BqB,EA+BZ;AAC/B,QAAIR,SAASA,MAAMS,GAAnB,EAAwB;AACtB,UAAMC,MAAMF,QAAQG,IAAR,CAAaX,MAAMS,GAAnB,CAAZ;AACA,UAAMG,QAAQF,IAAIG,MAAJ,CAAWD,KAAX,CAAiB,8BAAjB,CAAd;AACA,UAAIA,KAAJ,EAAW;AACT,YAAMf,OAAOe,MAAM,CAAN,CAAb;AACA,YAAME,UAAUN,QAAQO,UAAR,CAAmBlB,IAAnB,CAAhB;AACA,eAAOW,QAAQQ,KAAR,CAAcF,OAAd,CAAP;AACD;AACF;AACD,WAAOG,SAAP;AACD;AA1C4C,CAA/C;;AA6CAC,OAAOC,OAAP,GAAiB3B,mBAAjB","file":"base-cell-anchor-xform.js","sourcesContent":["'use strict';\r\n\r\nconst utils = require('../../../utils/utils');\r\nconst BaseXform = require('../base-xform');\r\n\r\nconst BaseCellAnchorXform = function() {};\r\n\r\nutils.inherits(BaseCellAnchorXform, BaseXform, {\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.reset();\r\n        this.model = {\r\n          range: {\r\n            editAs: node.attributes.editAs || 'oneCell',\r\n          },\r\n        };\r\n        break;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.parseOpen(node);\r\n        }\r\n        break;\r\n    }\r\n    return true;\r\n  },\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n\r\n  reconcilePicture(model, options) {\r\n    if (model && model.rId) {\r\n      const rel = options.rels[model.rId];\r\n      const match = rel.Target.match(/.*\\/media\\/(.+[.][a-z]{3,4})/);\r\n      if (match) {\r\n        const name = match[1];\r\n        const mediaId = options.mediaIndex[name];\r\n        return options.media[mediaId];\r\n      }\r\n    }\r\n    return undefined;\r\n  },\r\n});\r\n\r\nmodule.exports = BaseCellAnchorXform;\r\n"]}