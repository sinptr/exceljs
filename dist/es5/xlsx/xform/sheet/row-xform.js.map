{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/row-xform.js"],"names":["utils","require","BaseXform","CellXform","RowXform","module","exports","options","maxItems","map","c","inherits","tag","prepare","model","styleId","styles","addStyleModel","style","cellXform","cells","forEach","cellModel","render","xmlStream","openNode","addAttribute","number","height","hidden","min","max","outlineLevel","collapsed","closeNode","parseOpen","node","parser","name","numRowsSeen","spans","attributes","split","span","parseInt","undefined","r","s","bestFit","ht","parseFloat","parseText","text","parseClose","push","length","Error","reconcile","getStyleModel"],"mappings":"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","file":"row-xform.js","sourcesContent":["'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar CellXform = require('./cell-xform');\r\n\r\nvar RowXform = module.exports = function(options) {\r\n  this.maxItems = options && options.maxItems;\r\n  this.map = {\r\n    c: new CellXform()\r\n  };\r\n};\r\n\r\n// <row r=\"<%=row.number%>\"\r\n//     <% if(row.height) {%> ht=\"<%=row.height%>\" customHeight=\"1\"<% } %>\r\n//     <% if(row.hidden) {%> hidden=\"1\"<% } %>\r\n//     <% if(row.min > 0 && row.max > 0 && row.min <= row.max) {%> spans=\"<%=row.min%>:<%=row.max%>\"<% } %>\r\n//     <% if (row.styleId) { %> s=\"<%=row.styleId%>\" customFormat=\"1\" <% } %>\r\n//     x14ac:dyDescent=\"0.25\">\r\n//   <% row.cells.forEach(function(cell){ %>\r\n//     <%=cell.xml%><% }); %>\r\n// </row>\r\n\r\nutils.inherits(RowXform, BaseXform, {\r\n\r\n  get tag() { return 'row'; },\r\n\r\n  prepare: function(model, options) {\r\n    var styleId = options.styles.addStyleModel(model.style);\r\n    if (styleId) {\r\n      model.styleId = styleId;\r\n    }\r\n    var cellXform = this.map.c;\r\n    model.cells.forEach(function(cellModel) {\r\n      cellXform.prepare(cellModel, options);\r\n    });\r\n  },\r\n\r\n  render: function(xmlStream, model, options) {\r\n    xmlStream.openNode('row');\r\n    xmlStream.addAttribute('r', model.number);\r\n    if (model.height) {\r\n      xmlStream.addAttribute('ht', model.height);\r\n      xmlStream.addAttribute('customHeight', '1');\r\n    }\r\n    if (model.hidden) {\r\n      xmlStream.addAttribute('hidden', '1');\r\n    }\r\n    if (model.min > 0 && model.max > 0 && model.min <= model.max) {\r\n      xmlStream.addAttribute('spans', model.min + ':' + model.max);\r\n    }\r\n    if (model.styleId) {\r\n      xmlStream.addAttribute('s', model.styleId);\r\n      xmlStream.addAttribute('customFormat', '1');\r\n    }\r\n    xmlStream.addAttribute('x14ac:dyDescent', '0.25');\r\n    if (model.outlineLevel) {\r\n      xmlStream.addAttribute('outlineLevel', model.outlineLevel);\r\n    }\r\n    if (model.collapsed) {\r\n      xmlStream.addAttribute('collapsed', '1');\r\n    }\r\n\r\n    var cellXform = this.map.c;\r\n    model.cells.forEach(function(cellModel) {\r\n      cellXform.render(xmlStream, cellModel, options);\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else if (node.name === 'row') {\r\n      this.numRowsSeen += 1;\r\n      var spans = node.attributes.spans ? node.attributes.spans.split(':').map(function(span) { return parseInt(span, 10); }) : [undefined, undefined];\r\n      var model = this.model = {\r\n        number: parseInt(node.attributes.r, 10),\r\n        min: spans[0],\r\n        max: spans[1],\r\n        cells: []\r\n      };\r\n      if (node.attributes.s) {\r\n        model.styleId = parseInt(node.attributes.s, 10);\r\n      }\r\n      if (node.attributes.hidden) {\r\n        model.hidden = true;\r\n      }\r\n      if (node.attributes.bestFit) {\r\n        model.bestFit = true;\r\n      }\r\n      if (node.attributes.ht) {\r\n        model.height = parseFloat(node.attributes.ht);\r\n      }\r\n      if (node.attributes.outlineLevel) {\r\n        model.outlineLevel = parseInt(node.attributes.outlineLevel, 10);\r\n      }\r\n      if (node.attributes.collapsed) {\r\n        model.collapsed = true;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    this.parser = this.map[node.name];\r\n    if ((this.parser)) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.cells.push(this.parser.model);\r\n        if (this.maxItems && this.model.cells.length > this.maxItems) {\r\n          throw new Error('Max column count exceeded');\r\n        }\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n\r\n  reconcile: function(model, options) {\r\n    model.style = model.styleId ? options.styles.getStyleModel(model.styleId) : {};\r\n    if (model.styleId !== undefined) {\r\n      model.styleId = undefined;\r\n    }\r\n\r\n    var cellXform = this.map.c;\r\n    model.cells.forEach(function(cellModel) {\r\n      cellXform.reconcile(cellModel, options);\r\n    });\r\n  }\r\n});\r\n"]}