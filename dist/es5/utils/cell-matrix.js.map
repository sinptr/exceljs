{"version":3,"sources":["../../../lib/utils/cell-matrix.js"],"names":["_","require","colCache","CellMatrix","template","sheets","prototype","addCell","addressStr","addCellEx","decodeEx","getCell","findCellEx","findCell","findCellAt","sheetName","rowNumber","colNumber","sheet","row","address","top","bottom","col","left","right","getCellAt","getCellEx","create","findSheet","findSheetRow","findRowCell","cell","n2l","removeCellEx","forEachInSheet","callback","forEach","each","map","results","push","name","undefined","Object","assign","JSON","parse","stringify","spliceRows","start","numDelete","numInsert","inserts","i","splice","spliceColumns","module","exports"],"mappings":"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","file":"cell-matrix.js","sourcesContent":["'use strict';\r\n\r\nconst _ = require('./under-dash');\r\nconst colCache = require('./col-cache');\r\n\r\nconst CellMatrix = function(template) {\r\n  this.template = template;\r\n  this.sheets = {};\r\n};\r\n\r\nCellMatrix.prototype = {\r\n  addCell(addressStr) {\r\n    this.addCellEx(colCache.decodeEx(addressStr));\r\n  },\r\n  getCell(addressStr) {\r\n    return this.findCellEx(colCache.decodeEx(addressStr), true);\r\n  },\r\n  findCell(addressStr) {\r\n    return this.findCellEx(colCache.decodeEx(addressStr), false);\r\n  },\r\n\r\n  findCellAt(sheetName, rowNumber, colNumber) {\r\n    const sheet = this.sheets[sheetName];\r\n    const row = sheet && sheet[rowNumber];\r\n    return row && row[colNumber];\r\n  },\r\n  addCellEx(address) {\r\n    if (address.top) {\r\n      for (let row = address.top; row <= address.bottom; row++) {\r\n        for (let col = address.left; col <= address.right; col++) {\r\n          this.getCellAt(address.sheetName, row, col);\r\n        }\r\n      }\r\n    } else {\r\n      this.findCellEx(address, true);\r\n    }\r\n  },\r\n  getCellEx(address) {\r\n    return this.findCellEx(address, true);\r\n  },\r\n  findCellEx(address, create) {\r\n    const sheet = this.findSheet(address, create);\r\n    const row = this.findSheetRow(sheet, address, create);\r\n    return this.findRowCell(row, address, create);\r\n  },\r\n  getCellAt(sheetName, rowNumber, colNumber) {\r\n    const sheet = this.sheets[sheetName] || (this.sheets[sheetName] = []);\r\n    const row = sheet[rowNumber] || (sheet[rowNumber] = []);\r\n    const cell = row[colNumber] || (row[colNumber] = {\r\n      sheetName: sheetName,\r\n      address: colCache.n2l(colNumber) + rowNumber,\r\n      row: rowNumber,\r\n      col: colNumber\r\n    });\r\n    return cell;\r\n  },\r\n\r\n  removeCellEx(address) {\r\n    const sheet = this.findSheet(address);\r\n    if (!sheet) { return; }\r\n    const row = this.findSheetRow(sheet, address);\r\n    if (!row) { return; }\r\n    delete row[address.col];\r\n  },\r\n\r\n  forEachInSheet(sheetName, callback) {\r\n    const sheet = this.sheets[sheetName];\r\n    if (sheet) {\r\n      sheet.forEach((row, rowNumber) => {\r\n        if (row) {\r\n          row.forEach((cell, colNumber) => {\r\n            if (cell) {\r\n              callback(cell, rowNumber, colNumber);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  },\r\n  forEach(callback) {\r\n    _.each(this.sheets, (sheet, sheetName) => {\r\n      this.forEachInSheet(sheetName, callback);\r\n    });\r\n  },\r\n  map(callback) {\r\n    const results = [];\r\n    this.forEach(cell => { results.push(callback(cell)); });\r\n    return results;\r\n  },\r\n\r\n  findSheet(address, create) {\r\n    const name = address.sheetName;\r\n    if (this.sheets[name]) {\r\n      return this.sheets[name];\r\n    }\r\n    if (create) {\r\n      return (this.sheets[name] = []);\r\n    }\r\n    return undefined;\r\n  },\r\n  findSheetRow(sheet, address, create) {\r\n    const {row} = address;\r\n    if (sheet && sheet[row]) {\r\n      return sheet[row];\r\n    }\r\n    if (create) {\r\n      return (sheet[row] = []);\r\n    }\r\n    return undefined;\r\n  },\r\n  findRowCell(row, address, create) {\r\n    const {col} = address;\r\n    if (row && row[col]) {\r\n      return row[col];\r\n    }\r\n    if (create) {\r\n      return (\r\n        row[col] = this.template ?\r\n          Object.assign(address, JSON.parse(JSON.stringify(this.template))) :\r\n          address\r\n      );\r\n    }\r\n    return undefined;\r\n  },\r\n\r\n  spliceRows(sheetName, start, numDelete, numInsert) {\r\n    const sheet = this.sheets[sheetName];\r\n    if (sheet) {\r\n      const inserts = [];\r\n      for (let i = 0; i < numInsert; i++) {\r\n        inserts.push([]);\r\n      }\r\n      sheet.splice(start, numDelete, ...inserts);\r\n    }\r\n  },\r\n  spliceColumns(sheetName, start, numDelete, numInsert) {\r\n    const sheet = this.sheets[sheetName];\r\n    if (sheet) {\r\n      const inserts = [];\r\n      for (let i = 0; i < numInsert; i++) {\r\n        inserts.push(null);\r\n      }\r\n      _.each(sheet, row => {\r\n        row.splice(start, numDelete, ...inserts);\r\n      });\r\n    }\r\n  },\r\n};\r\n\r\nmodule.exports = CellMatrix;\r\n"]}